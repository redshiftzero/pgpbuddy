from os import path

import gnupg


"""
To use this module, you first need to generate a bunch of pgp keys. A convenient script to do so can be found in the
credentials directory.

cd credentials
./generate_keys.sh

The expired key can not be generated by the script. Change your machine time to two days ago. Then run
gpg --homedir expired --batch --gen-key expired.keyconfig

Don't forget to change back your machine time.
"""

known_users = {"buddy": "buddy@pgp.today", "user1": "user1@example.com", "user2": "user2@test.nl"}


def decrypt_plain_text():
    data = "this is a plain text message"
    log_decrypt_response(decrypt(data, recipient="buddy"))


def decrypt_correct():
    data = "this will be encrypted"
    encrypted = encrypt(data, recipient="buddy")
    decrypted = decrypt(encrypted, recipient="buddy")
    log_decrypt_response(decrypted)


def decrypt_wrong_recipient():
    data = "this will be encrypted"
    encrypted = encrypt(data, recipient="user2")
    decrypted = decrypt(encrypted, recipient="buddy")
    log_decrypt_response(decrypted)


def verify_plain_text():
    data = "this is a plain text message"
    log_verify_response(verify(data, "user1"))


def verify_correctly_signed():
    data = "this will be signed"
    signed = sign(data, "user1")
    log_verify_response(verify(signed, "user1"))


def verify_public_key_unknown():
    data = "this will be signed"
    signed = sign(data, "user1")
    log_verify_response(verify(signed, "buddy"))


def decrypt_and_verify_correct():


"""
Bunch of utility functions
"""

def init_gpg(user):
    gpg = gnupg.GPG(gnupghome=path.join("credentials", user))
    gpg.encoding = 'utf-8'
    return gpg


def encrypt(text, recipient):
    gpg = init_gpg(recipient)
    return gpg.encrypt(text, recipients=[known_users[recipient]]).data


def decrypt(text, recipient):
    gpg = init_gpg(recipient)
    return gpg.decrypt(text)


def sign(text, sender):
    gpg = init_gpg(sender)
    return gpg.sign(text).data


def verify(text, sender):
    gpg = init_gpg(sender)
    return gpg.verify(text)



def log_decrypt_response(response):
    print("status = '{}'".format(response.status))
    print("ok = {}".format(response.ok))
    print("data = {}".format(response.data))


def log_verify_response(response):
    print("valid = {}".format(response.valid))
    print("status = '{}'".format(response.status))
    print("key_id = '{}'".format(response.key_id))


if __name__ == '__main__':
    #decrypt_plain_text()
    #decrypt_correct()
    #decrypt_wrong_recipient()

    #verify_plain_text()
    #verify_correctly_signed()
    #verify_public_key_unknown()

